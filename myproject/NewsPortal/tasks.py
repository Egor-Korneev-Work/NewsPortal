from celery import shared_task
from django.core.mail import send_mail
from django.conf import settings
from .models import Post, User
from django.utils import timezone
from django.template.loader import render_to_string
from django.utils.html import strip_tags


@shared_task
def send_notification_to_subscribers(post_id):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å email –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å—Ç–∞
    """
    try:
        post = Post.objects.prefetch_related('categories__subscribers').get(id=post_id)
    except Post.DoesNotExist:
        return f"Post with id {post_id} not found"

    subject = f'–ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è: "{post.title}"'

    sent_count = 0
    errors = []

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ—Å—Ç–∞
    for category in post.categories.all():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for subscriber in category.subscribers.all():
            if not subscriber.email:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ email

            message = (
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {subscriber.username}!\n\n"
                f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ \"{category.name}\" –≤—ã—à–ª–∞ –Ω–æ–≤–∞—è —Å—Ç–∞—Ç—å—è: \"{post.title}\".\n"
                f"–ü—Ä–æ—á–∏—Ç–∞—Ç—å –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: http://127.0.0.1:8000{post.get_absolute_url()}\n\n"
                f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Ä—Ç–∞–ª–∞"
            )

            try:
                send_mail(
                    subject=subject,
                    message=message,
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    recipient_list=[subscriber.email],
                    fail_silently=False,
                )
                sent_count += 1
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {subscriber.email}: {str(e)}")

    result = f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {sent_count} –∏–∑ {sum(c.subscribers.count() for c in post.categories.all())} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤."
    if errors:
        result += "\n–û—à–∏–±–∫–∏: " + "; ".join(errors)

    return result

@shared_task
def send_weekly_newsletter():
    help = '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π'

    def handle(self, *args, **kwargs):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        users = User.objects.filter(categories__isnull=False).distinct()

        for user in users:
            if not user.email:
                self.stdout.write(self.style.WARNING(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –Ω–µ—Ç email'))
                continue

            # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            categories = user.categories.all()

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –≤ —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            one_week_ago = timezone.now() - timezone.timedelta(days=7)
            posts = Post.objects.filter(
                categories__in=categories,
                created_at__gte=one_week_ago
            ).distinct()

            if posts.exists():
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML-–ø–∏—Å—å–º–æ
                subject = "üì∞ –í–∞—à–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é"
                html_message = render_to_string('email/weekly_newsletter.html', {
                    'user': user,
                    'posts': posts,
                })
                plain_message = strip_tags(html_message)
                from_email = settings.DEFAULT_FROM_EMAIL

                try:
                    send_mail(
                        subject=subject,
                        message=plain_message,
                        from_email=from_email,
                        recipient_list=[user.email],
                        html_message=html_message,
                        fail_silently=False,
                    )
                    self.stdout.write(self.style.SUCCESS(f'–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user.email}'))
                except Exception as e:
                    self.stdout.write(self.style.ERROR(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user.email}: {e}'))
            else:
                self.stdout.write(self.style.NOTICE(f'–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è {user.username}'))

        self.stdout.write(self.style.SUCCESS('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'))